# Reader for the matrix market exchange coodinate format

import edge
import streams
import strutils
import strscans
import strformat

import logger
import edge_stream

type
    Mtx* = object of RootObj
        rows: int
        cols: int
        entries: int
        stream: Stream
    MtxReader* = object of Mtx
        line: string
        entries_pos: int
    MtxWriter* = object of Mtx
        num_edges_written: int

proc initMtxWriter *(stream: Stream, rows, cols, entries: int): MtxWriter =
    result.stream = stream
    result.rows = rows
    result.cols = cols
    result.entries = entries
    result.stream.writeLine("% generated by cwpearson/graph-datasets2")
    result.stream.writeLine(&"{result.rows} {result.cols} {result.entries}")
    result.num_edges_written = 0

proc writeEdge *(t: var MtxWriter, edge: Edge) =
    let
        src = edge.src
        dst = edge.dst
        weight = edge.weight
    assert src <= t.rows
    assert dst <= t.cols
    assert t.num_edges_written < t.entries
    t.stream.writeLine([$src, $dst, $weight].join("\t"))
    t.num_edges_written += 1

proc initMtxReader *(stream: Stream): MtxReader =
    result.stream = stream
    for line in result.stream.lines():
        # skip comment lines
        if line.startsWith("%"):
            debug("skip comment line: ", line)
            continue
        # read the first line to get weights
        debug("getting rows,cols,entries from line: ", line)
        assert scanf(line, "$s$i$s$i$s$i", result.rows, result.cols,
                result.entries)
        result.entries_pos = result.stream.getPosition()
        break


iterator edges*(t: MtxReader): Edge =
    # start reading after the comments/header
    debug("data starts at position: ")
    t.stream.setPosition(t.entries_pos)
    for line in t.stream.lines():
        if line.strip() == "":
            debug("skip empty line")
            continue
        else:
            var
                src, dst: int
                weight: float
            debug("parsing line: ", line)
            if scanf(line, "$s$i$s$i$s$f", src, dst, weight):
                assert src <= t.rows
                assert dst <= t.cols
                let edge = initEdge(src-1, dst-1, weight)
                yield edge
            else:
                if not t.stream.atEnd():
                    error("error parsing line ", line)

when isMainModule:
    let contents = """%test  data
    1 2 3
    1   1   1.0
    1   2   2.0
    """
    var stream = newStringStream(contents)
    var reader = initMtxReader(stream)
    for edge in reader.edges():
        echo edge

    var ostream = newStringStream()
    var writer = initMtxWriter(ostream, 1, 2, 2)
    for edge in reader.edges():
        writer.writeEdge(edge)

    echo ostream.data
