# Reader for the matrix market exchange coodinate format

import edge
import streams
import strutils
import strscans
import strformat

import logger
import edge_stream

type
    MtxStream* = ref MtxStreamObj
    MtxStreamObj = object of EdgeStream
        rows: int
        cols: int
        entries: int
        entries_pos: int
        num_edges_written: int

proc msReadEdge(es: EdgeStream, edge: var Edge): bool =
    # start reading after the comments/header
    let datapos = MtxStream(es).entries_pos
    if es.getPosition() < data_pos:
        debug(&"set position past header: {datapos}")
        es.setPosition(datapos)
    for line in es.stream.lines():
        if line.strip() == "":
            debug("skip empty line")
            continue
        else:
            var
                src, dst: int
                weight: float
            debug("parsing line: ", line)
            if scanf(line, "$s$i$s$i$s$f", src, dst, weight):
                assert src <= MtxStream(es).rows
                assert dst <= MtxStream(es).cols
                edge = initEdge(src-1, dst-1, weight)
                return true
            elif not es.atEnd():
                error("error parsing line ", line)
                return false
    return false


proc msWriteEdge(es: EdgeStream, edge: Edge) =
    let
        src = edge.src + 1
        dst = edge.dst + 1
        weight = edge.weight
    assert src <= MtxStream(es).rows
    assert dst <= MtxStream(es).cols, &"edge with col {dst} is outside matrix {MtxStream(es).cols}"
    assert MtxStream(es).num_edges_written < MtxStream(es).entries, &"wrote more edges {MtxStream(es).num_edges_written} than expected {MtxStream(es).entries}"
    es.stream.writeLine($src & "\t" & $dst & "\t" & $weight)
    MtxStream(es).num_edges_written += 1

proc newMtxStream(stream: Stream): MtxStream =
    new(result)
    result.stream = stream
    result.readEdgeImpl = msReadEdge
    result.writeEdgeImpl = msWriteEdge

proc newMtxWriter *(stream: Stream, rows, cols, entries: int): MtxStream =
    result = newMtxStream(stream)
    result.rows = rows
    result.cols = cols
    result.entries = entries
    result.stream.writeLine("% generated by cwpearson/graph-datasets2")
    result.stream.writeLine(&"{result.rows} {result.cols} {result.entries}")
    result.num_edges_written = 0


proc newMtxReader *(stream: Stream): MtxStream =
    result = newMtxStream(stream)
    for line in result.stream.lines():
        # skip comment lines
        if line.startsWith("%"):
            debug("skip comment line: ", line)
            continue
        # read the first line to get weights
        debug("getting rows,cols,entries from line: ", line)
        assert scanf(line, "$s$i$s$i$s$i", result.rows, result.cols,
                result.entries)
        result.entries_pos = result.stream.getPosition()
        break


when isMainModule:
    let contents = """%test  data
    1 2 3
    1   1   1.0
    1   2   2.0
    """
    var stream = newStringStream(contents)
    var reader = newMtxReader(stream)
    for edge in reader.edges():
        echo edge

    var ostream = newStringStream()
    var writer = newMtxWriter(ostream, 1, 2, 2)
    reader.setPosition(0)
    for edge in reader.edges():
        echo edge
        writer.writeEdge(edge)

    echo ostream.data
